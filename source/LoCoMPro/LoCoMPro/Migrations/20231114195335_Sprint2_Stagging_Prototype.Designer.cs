// <auto-generated />
using System;
using LoCoMPro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace LoCoMPro.Migrations
{
    [DbContext(typeof(LoCoMProContext))]
    [Migration("20231114195335_Sprint2_Stagging_Prototype")]
    partial class Sprint2_Stagging_Prototype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AsociatedWith", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryName", "ProductName");

                    b.HasIndex("ProductName");

                    b.ToTable("AsociatedWith");
                });

            modelBuilder.Entity("LoCoMPro.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinciaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("CantonName", "ProvinciaName");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Canton", b =>
                {
                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinciaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.HasKey("CantonName", "ProvinciaName");

                    b.HasIndex("ProvinciaName");

                    b.ToTable("Canton", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Category", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryName");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("ContributorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId", "ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate");

                    b.HasIndex("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Product", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Provincia", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Provincia", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Register", b =>
                {
                    b.Property<string>("ContributorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinciaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinciaName", "SubmitionDate");

                    b.HasIndex("ProductName");

                    b.HasIndex("StoreName", "CantonName", "ProvinciaName");

                    b.ToTable("Register", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Report", b =>
                {
                    b.Property<string>("ReporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContributorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CantonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportState")
                        .HasColumnType("int");

                    b.HasKey("ReporterId", "ContributorId", "ProductName", "StoreName", "SubmitionDate");

                    b.HasIndex("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Review", b =>
                {
                    b.Property<string>("ReviewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContributorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CantonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("ReviewValue")
                        .HasColumnType("real");

                    b.HasKey("ReviewerId", "ContributorId", "ProductName", "StoreName", "SubmitionDate");

                    b.HasIndex("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.SearchResult", b =>
                {
                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContributorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinciaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.ToTable((string)null);

                    b.ToView("SearchResult", (string)null);
                });

            modelBuilder.Entity("LoCoMPro.Models.Store", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinciaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.HasKey("Name", "CantonName", "ProvinciaName");

                    b.HasIndex("CantonName", "ProvinciaName");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sells", b =>
                {
                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CantonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductName", "StoreName", "CantonName", "ProvinceName");

                    b.HasIndex("StoreName", "CantonName", "ProvinceName");

                    b.ToTable("Sells");
                });

            modelBuilder.Entity("AsociatedWith", b =>
                {
                    b.HasOne("LoCoMPro.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoCoMPro.Data.User", b =>
                {
                    b.HasOne("LoCoMPro.Models.Canton", "Location")
                        .WithMany("Users")
                        .HasForeignKey("CantonName", "ProvinciaName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LoCoMPro.Models.Canton", b =>
                {
                    b.HasOne("LoCoMPro.Models.Provincia", "Provincia")
                        .WithMany("Cantones")
                        .HasForeignKey("ProvinciaName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("LoCoMPro.Models.Image", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Register", "Register")
                        .WithMany("Images")
                        .HasForeignKey("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("LoCoMPro.Models.Register", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", "Contributor")
                        .WithMany("Registers")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Product", "Product")
                        .WithMany("Registers")
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Store", "Store")
                        .WithMany("Registers")
                        .HasForeignKey("StoreName", "CantonName", "ProvinciaName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LoCoMPro.Models.Report", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Register", "ReportedRegister")
                        .WithMany("Reports")
                        .HasForeignKey("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedRegister");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("LoCoMPro.Models.Review", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Register", "ReviewedRegister")
                        .WithMany("Reviews")
                        .HasForeignKey("ContributorId", "ProductName", "StoreName", "CantonName", "ProvinceName", "SubmitionDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedRegister");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("LoCoMPro.Models.Store", b =>
                {
                    b.HasOne("LoCoMPro.Models.Canton", "Location")
                        .WithMany("Stores")
                        .HasForeignKey("CantonName", "ProvinciaName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LoCoMPro.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sells", b =>
                {
                    b.HasOne("LoCoMPro.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoCoMPro.Models.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreName", "CantonName", "ProvinceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoCoMPro.Data.User", b =>
                {
                    b.Navigation("Registers");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LoCoMPro.Models.Canton", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LoCoMPro.Models.Product", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("LoCoMPro.Models.Provincia", b =>
                {
                    b.Navigation("Cantones");
                });

            modelBuilder.Entity("LoCoMPro.Models.Register", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LoCoMPro.Models.Store", b =>
                {
                    b.Navigation("Registers");
                });
#pragma warning restore 612, 618
        }
    }
}
